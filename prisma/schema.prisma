generator client {
  provider = "prisma-client-js"
  //previewFeatures = ["referentialIntegrity", "interactiveTransactions"]
}

// TiDB is highly compatible with the MySQL 5.7 protocol and the common features 
// and syntax of MySQL 5.7.
//
// TiDB currently does not support foreign key constraints. If you need to use the feature of 
// referential integrity, you can use the application layer implementation of prisma.
//
// Refercene: https://www.prisma.io/docs/concepts/components/prisma-schema/relations/referential-integrity#handling-the-referential-integrity-in-prisma
// Related Issue [WIP]: https://github.com/pingcap/tidb/issues/18209
// 
// More descriptions about MySQL compatibility:
// Refercene: https://docs.pingcap.com/tidb/dev/mysql-compatibility

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// 
// https://www.prisma.io/docs/concepts/components/prisma-schema/data-model

model Author {
  id        BigInt       @id
  name      String       @db.VarChar(100)
  gender    Boolean?
  birthYear Int?         @map("birth_year") @db.SmallInt
  deathYear Int?         @map("death_year") @db.SmallInt
  foods     FoodAuthor[]

  @@map("authors")
}

model FoodAuthor {
  food     Food   @relation(fields: [foodId], references: [id])
  foodId   BigInt @map("food_id")
  author   Author @relation(fields: [authorId], references: [id])
  authorId BigInt @map("author_id")

  @@id([foodId, authorId])
  @@map("food_authors")
}

model Food {
  id      BigInt @id
  articul String @db.VarChar(12)
  title   String @db.VarChar(256)

  price         Decimal  @default(0.0) @db.Decimal(15, 2)
  priceDiscount Decimal  @default(0.0) @map("price_discount") @db.Decimal(15, 2)
  vat           Boolean?
  isPromo       Boolean?
  ozonId        String   @map("ozon_id") @db.VarChar(256)
  barcode       String   @db.VarChar(256)
  packageWeight Int      @map("package_weight")
  packageWidth  Int      @map("package_width")
  packageHeight Int      @map("package_height")
  lengthHeight  Int      @map("length_height")
  img1          String   @db.VarChar(256)
  img2          String?  @db.VarChar(256)
  img3          String?  @db.VarChar(256)
  img4          String?  @db.VarChar(256)

  brand   Brand  @relation(fields: [brandId], references: [id])
  brandId BigInt @map("brand_id")

  type     FoodType
  feature1 String?  @db.VarChar(256)

  typeAgePet   TypeAgePet @relation(fields: [typeAgePetId], references: [id])
  typeAgePetId BigInt     @map("type_age_pet_id")

  weight   Int  @map("weight")
  quantity Int?

  taste   Taste  @relation(fields: [tasteId], references: [id])
  tasteId BigInt @map("taste_id")

  quantityPackage Int?
  designedFor     DesignedFor @relation(fields: [designedForId], references: [id])
  designedForId   BigInt      @map("designed_for_id")
  expiration      Int
  picking         String?     @db.VarChar(100)

  package   Package @relation(fields: [packageId], references: [id])
  packageId BigInt  @map("package_id")

  proteins Decimal? @default(0.0) @db.Decimal(3, 1)
  fats     Decimal? @default(0.0) @db.Decimal(3, 1)

  createdAt DateTime @default(now()) @map("ordered_at") @db.DateTime(0)
  stock     Int      @default(0)

  authors FoodAuthor[]
  ratings Rating[]
  orders  Order[]

  @@map("foods")
}

model Package {
  id   BigInt @id
  name String @db.VarChar(100)
  food Food[]

  @@map("packages")
}

model DesignedFor {
  id   BigInt @id
  name String @db.VarChar(100)
  food Food[]

  @@map("designed_for")
}

model Brand {
  id   BigInt @id
  name String @db.VarChar(100)
  food Food[]

  @@map("brands")
}

model Taste {
  id        BigInt @id
  tasteName String @map("taste_name") @db.VarChar(100)
  food      Food[]

  @@map("tastes")
}

model TypeAgePet {
  id       BigInt @id
  typeName String @unique(map: "type_name") @db.VarChar(100)
  food     Food[]

  @@map("type_age_pet")
}

model User {
  id       BigInt   @id
  balance  Decimal  @default(0.0) @db.Decimal(15, 2)
  nickname String   @unique(map: "nickname") @db.VarChar(100)
  ratings  Rating[]
  orders   Order[]

  @@map("users")
}

model Order {
  id        BigInt   @id @default(autoincrement())
  food      Food     @relation(fields: [foodId], references: [id])
  foodId    BigInt   @map("food_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    BigInt   @map("user_id")
  quality   Int      @db.TinyInt
  orderedAt DateTime @default(now()) @map("ordered_at") @db.DateTime(0)

  @@index([foodId])
  @@map("orders")
}

model Rating {
  food    Food     @relation(fields: [foodId], references: [id])
  foodId  BigInt   @map("food_id")
  user    User     @relation(fields: [userId], references: [id])
  userId  BigInt   @map("user_id")
  score   Int      @db.TinyInt
  ratedAt DateTime @default(now()) @map("rated_at") @db.DateTime(0)

  @@id([foodId, userId])
  @@unique([foodId, userId], map: "uniq_food_user_idx")
  @@map("ratings")
}

// Because special characters cannot be used in the schema definition of the data model.
// We use `_nbsp_` to represent one space and use `_amp_` to represent `&`.

enum FoodType {
  Treat

  @@map("foods_type")
}

enum AgePet {
  Young
  Adult
  Old

  @@map("age_pet")
}
